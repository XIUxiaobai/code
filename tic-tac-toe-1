//Game.c
#define _CRT_SECURE_NO_WARNINGS

#include"Game.h"
void QIPAN(char PAN[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		printf(" %c | %c | %c\n", PAN[i][0], PAN[i][1], PAN[i][2]);
		if (i < row - 1)
			printf("---|---|--- \n");
	}
}
void InitBoard(char PAN[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			PAN[i][j] = ' ';
		}
	}
}
void PlayerMove(char PAN[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走\n");
	printf("请输入坐标：");
	scanf("%d%d", &x, &y);
	if (x >= 1 && x <= ROW &&y >= 1 && y <= COL)
	{
		if (PAN[x-1][y-1] = ' ')
       {
			PAN[x-1][y-1] = 'x';
       }
		else
		{
			printf("坐标已经被占，请重新输入：");
		}
	}
	else
	{
		printf("坐标错误\n");
	}

}
void ComputerMove(char PAN[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0; []
	printf("电脑走\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (PAN[x][y] == ' ')
		{
			PAN[x][y] = '0';
			break;
		}
	}
}
int IsFull(char PAN[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (PAN[i][j] == ' ')
			{
				return 0;
			}
		}
		return 1;
	}
}
char Check(char PAN[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		if (PAN[i][0]==PAN[i][1]&&PAN[i][1]==PAN[i][2]&&PAN[i][0]!=' ')
		{
			return PAN[i][0];
		}
	}
	for (i = 0; i <col; i++)
	{
		if (PAN[0][i] == PAN[1][i] && PAN[0][i] == PAN[2][i] && (PAN[0][i] != ' ') )
		{
			return PAN[0][i];
		}
	}
	if (PAN[0][0] == PAN[1][1] && PAN[2][2] == PAN[1][1] && PAN[1][1] != ' ')
	{
		return PAN[1][1];
	}
	if (PAN[0][2] == PAN[1][1] && PAN[2][0] == PAN[1][1] && PAN[1][1] != ' ')
	{
		return PAN[1][1];
	}
	if (IsFull(PAN,row,col)==1)
	{
		return 'Q';
	}
	return ' ';
}
