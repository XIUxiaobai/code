进程能够处理信号量的前提是必须认识记住信号。
进程收到信号的时候有可能不会立即去处理，而是在适当的时候去处理。
信号事件的产生对进程来说是异步的。
处理信号的方法：1.可以执行规定默认的动作。2.也有可能直接忽略这个信号。3.还有自定义的动作。4.信号如果无法立即处理，就得把它纪录下来。
信号是以通知为目的发送事件，信号是给系统给特定装置发送消息
进程中的PCB中肯定有一个地方来存信号（保存）。
普通信号，编号从一开始连续整数（1到31），进程只关心是否收到信号，不关心收到了几个。
用31个比特位记录信号有还是没有。
向目标进程发送3号信号就是将进程中存信号的比特位由0变为1。对应位置是否产生。

信号的产生
信号能够记录和处理，如何产生信号？：信号本质是PCB中的数据，发信号的过程就是修改特定比特位也就是PCB中的数据，信号的产生都是操作系统发送。操作系统向进程写信号。
1.键盘产生：写一个程序，死循环，通过ctrl c阻止。操作系统将它理解成一个信号，继而将进程中的PCB进行修改。（只能发送给前台进程，不能阻止后台进程）
2.除零操作，CPU发现除零，操作系统就捕捉到异常，并向引起异常的进程发送信号。
程序异常，就是操作系统向进程发送信号。（Floating point…）
3.用kill命令
4，系统调用命令
4.软件条件产生信号
写端一直写，但读端不会读，这时操作系统就会发送信号关闭该进程
信号捕捉
捕捉一个信号，修改终止它

异常
异常产生它就会一直在cpu中，在下次调度它时异常还会出现。如果阻止这种情况就要在异常出现第一次时就将这个进程终止。
保护和恢复上下文（当前cpu中的临时数据保存到PCB中）。

（core domp）核心转储：
当⼀个进程要异常终⽌时,可以选择把进程的⽤户空间内存数据全部 保存
到磁盘上,⽂件名通常是core,这叫做Core Dump。
用core调试（事后调试）就是先把程序跑起来，挂了再调试;core -file +回车。

软件条件产生信号
写端一直写，但读端不会读，这时操作系统就会发送信号关闭该进程

统一由操作系统向目标进程写信号

普通信号用位图，实时信号用队列
panding位图由0制1
