#include <stdio.h>  
#include <math.h>  
double Minfabsnum(double x,double y);   //Calculate the min of fabs(x),fabs(y)  
void GiveInstruction(void); //Give instruction and reference to users  
#define e 0.0001    //The accurcy   
   
double main()  
{  
     double x,y,c;  
     GiveInstruction();  
     printf("Please input 2 numers:");  
     scanf("%lf,%lf",&x,&y);  
     c=Minfabsnum(x,y);  
     if(fabs(x-y)/c<e)  
        printf("Two numers satisfy the accurcy!");  
    else  
        printf("Two numers not satisfy the accurcy!");  
}   
   
double Minfabsnum(double x,double y)    //Calculate the min of fabs(x),fabs(y)  
{  
    double a,b;  
    a=fabs(x);  
    b=fabs(y);  
    if(a<=b)  
    return a;  
    else 
    return b;  
}  
   
void GiveInstruction(void)  //Give instruction and reference to users  
{  
    printf("This program can ensure the accurcy of two double numbers!\n");  
    printf("And the accurcy is 0.0001\n\n");  
}

来自 <https://www.2cto.com/kf/201804/736136.html> 


//直接插入排序：将第一个数据看做一个顺序表，将后面的数据一次插入表中
void InsertSort(int a[], int n)  
{  
    for(int i= 1; i<n; i++){  
        if(a[i] < a[i-1]){               //若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入  
            int j= i-1;   //表中最后一个数据
            int x = a[i];        //复制为哨兵，即存储待排序元素  
            a[i] = a[i-1];           //先后移一个元素 (因为a[i]就是X，所以不怕丢失) 
            while(j>=0 && x < a[j]){  //查找在有序表的插入位置  (遍历表)
                a[j+1] = a[j];  
                j--;         //元素后移  
            }  
            a[j+1] = x;      //插入到正确位置  
        }  
    }  
      
} 
int main()
{
	int n;
	cin>>n;
	int *a=new int[n];
	for(int j=0;j<n;j++)
		cin>>a[j];
	InsertSort(a,n);
	for(int i=0;i<n;i++)
		cout<<a[i];
	delete []a;
｝

//折半插入
void BInsertSort(int a[], int n)  
{  
    for(int i= 1; i<n; i++){  
		int low=0,high=i;
        if(a[i] < a[i-1]){               //若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入  
            int x = a[i];        //复制为哨兵，即存储待排序元素  
            a[i] = a[i-1];           //先后移一个元素 (因为a[i]就是X，所以不怕丢失) 
            while(low<=high){  //查找在有序表的插入位置  (遍历表)
                int m=(low+high)/2;
				if(x<a[m])  high=m-1;
				else low=m+1;
            }  
			for(int j=i-1;j>=high+1;j--)
				a[j+1]=a[j];
            a[j+1] = x;      //插入到正确位置  
        }  
    }  
      
} 
int main()
{
	int n;
	cin>>n;
	int *a=new int[n];
	for(int j=0;j<n;j++)
		cin>>a[j];
	BInsertSort(a,n);
	for(int i=0;i<n;i++)
		cout<<a[i];
	delete []a;
}

//希尔排序：去增量为d1的分为一组，共分成d1组分别进行插入排序，然后每组对应元素放在一起，然后取d2...知道d=1
void ShellSort(int a[],int n)
{
	int dk;
	int tmp;
	for(dk=n/2;dk>0;dk/=2)
		for(int i=dk;i<n;i++)
		{
			tmp=a[i];
			for(int j=i;j>=dk;j-=dk)
				if(tmp<a[j-dk])
					a[j]=a[j-dk];
				else break;
			a[j]=tmp;
		}
}
int main()
{
	int n;
	cin>>n;
	int *a=new int[n];
	for(int j=0;j<n;j++)
		cin>>a[j];
	ShellSort(a,n);
	for(int i=0;i<n;i++)
		cout<<a[i];
	delete []a;
}

//简单选择排序：遍历一次找到最小与第一个元素呼唤位置，再从第二个元素开始遍历找到最小与第二个元素呼唤位置...
void SelectSort(int a[],int n)
{
	for(int i=0;i<n-1;i++)
	{
		int k=i;//记录最小的那个下标的
		for(int j=i+1;j<n;j++)
			if(a[j]<a[k])
				k=j;
		if(k!=i)
		{
			int t=a[i];
			a[i]=a[k];
			a[k]=t;
		}
 
	}
}
int main()
{
	int n;
	cin>>n;
	int *a=new int[n];
	for(int j=0;j<n;j++)
		cin>>a[j];
	SelectSort(a,n);
	for(int i=0;i<n;i++)
		cout<<a[i];
	delete []a;
}

//堆排序:树形选择排序，将带排序记录看成完整的二叉树，第一步：建立初堆，第二步：调整堆
//第二步：调整堆
void HeapAdjust(int a[],int s,int n)
{
	//调整为小根堆，从小到大
	int rc=a[s];
	for(int j=2*s;j<=n;j*=2)
	{
		if(j<n && a[j]>a[j+1])//判断左右子数大小
			j++;
		if(rc<=a[j])
			break;
		a[s]=a[j];
		s=j;
	}
	a[s]=rc;
}
//第一步：建初堆
void CreatHeap(int a[],int n)
{
	//小根堆
	for(int i=n/2;i>0;i--)
		HeapAdjust(a,i,n);
}
//整合
void HeapSort(int a[],int n)
{
	CreatHeap(a,n);//第一步，建立初堆
	for(int i=n;i>1;i--)
	{
		int x=a[1];//堆顶与最后一个元素互换
		a[1]=a[i];
		a[i]=x;
		HeapAdjust(a,1,i-1);
	}
 
}
int main()
{
	int n;
	cin>>n;
	int *a=new int[n+1];
	for(int j=1;j<n;j++)//注意：这里是从1开始的
		cin>>a[j];
	HeapSort(a,n);
	for(int i=1;i<n;i++)
		cout<<a[i];
	delete []a;
}

//算法关键：将头节点后的节点移到头结点之前，并使最前面的节点为头结点

#include<stdio.h>
#include<malloc.h>
#define LEN sizeof(struct LNode)

struct LNode
{
    int data;
    struct LNode *next;
};

struct LNode *creat()
{struct LNode *head,*p1,*p2;
p1=p2=(struct LNode * )malloc(LEN);
    int n=0;
    printf("请依次输入链表1的数据,输入0时结束：\n");
    scanf("%d",&p1->data);
    head=NULL;
    while(p1->data!=0) 
    {n++;
    if(n==1)head=p1;
    else p2->next=p1;
    p2=p1;
    p1=(struct LNode *)malloc(LEN);
    scanf("%d",&p1->data);
    }
    p2->next=NULL;
    return(head); 
}

void print(struct LNode *head)
{
    struct LNode *p;
    printf("逆置后的链表为：\n");
    p=head;
    if(head!=NULL)
    {
        while(p!=NULL)
        {printf("%d\n",p->data);
        p=p->next;
        }
    }
}
