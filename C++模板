模板可能带来代码膨胀，这个问题是不可避免的
模板函数和模板类：string当作类的成员出现，或者单个数据存在。
vector和list:
两者的区别：逻辑结构是一样的，解决的问题是一样的。
·尾插和尾删，很容易访问使用vector。
支持随机访问。
缺点：增容代价很大。
增容很浪费空间。

如果经常中间删除，头部删除，要用list。
list不支持随机访问。
cpu高速缓存比list高。
list适合任意位置插删改.

vector和list增容：不一定是2倍增。看实际情况。
怎么增？类型萃取？迭代器如何实现？什么是迭代器失效？双端队列？
什么是适配器（本质是一种转换模式）？优先级队列？仿函数（就像热水伐，左边冷水右边热水，像开关一样）？
泛型编程：编写跟类型无关的代码。

C++的缺陷：array不适用，很鸡肋。因为？？
更新很慢，更新的东西还不一定好用。

模板进阶
·非类型模板参数
·类模板的特化
·类模板特化的应用之类的萃取

自定义类型（浮点数等）不能作为非类型模板参数（就是整型可以）

1.预处理 展开文件头+宏替换+条件编译
 a.i main. i
2.编译  检查语法，生成汇编代码
 a.s main.s
3.汇编  汇编代码转换成机器码
 a.o main.o
4.链接
