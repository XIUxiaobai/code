分段加分页的管理





globalVar C
数组在栈上
常量区在代码段
指针在栈上
动态开辟的空间在堆上



类型或对象的大小

是函数，遇到/0就结束

高地址是给内核用的

虚拟进程地址空间

栈

共享映射区

堆

数据段（静态区）

代码段（常量）

32和64位和虚拟地址有关，就是和进程有关系。进程是由编译器控制，编译器由人控制。
进程地址空间。

内置类型     malloc和new效果一样
自定义类型    malloc和new不一样
C++建议使用new
malloc和new的区别在于：用法是不一样的，内置类型值是随机的new并没有初始化对于自定义类型，new初始化除了开空间，还会调用构造函数
malloc只负责开空间。
Test* p3 = new Test;//1.开空间2.调用构造函数
Test* p4 = （Test*）malloc(sizeof(Test));//1.开空间


Delete p3//3.析构（清理空间）4.释放空间

malloc匹配free
new匹配delete

Operator new = 封装了（malloc +失败抛异常）
Operator delete = free


内置类型
New int ==>> operator new开空间 ==>>malloc==》构造
Malloc int =》malloc                                                                                                     为了失败能够抛出异常

New Test ==》operator new =>malloc =>构造
Malloc Test =》malloc


参数不同就可以重载

异常是C++失败后返回的

所有语言都支持虚拟进程地址空间分段
C语言动态内存管理   malloc
C++动态内存管理  new/delete           new[]/delete[]
new定位表达式
                只会开辟空间

vector支持尾插尾删，增容，时间复杂度
优点：随机访问，缓存利用率比较高，cpu告诉缓存l1，l2,l3

双端队列：并不是队列，能在两端进行操作，伸缩，和vector使用方法相似。
虽然depue也提供迭代器，到那时它的迭代器并不是原生指标。设计的太复杂了。
指针数组（中控）指向buff缓冲区，迭代器里有四个指针，cur指向下一个指针插入的，first指向开始，last指向最后，node反向指向中控，也就是指向指针数组。cur等于node相当于数组指针满了。重开一个Buff。
1.头插，尾插效率非常高（不会有增容问题，缓存利用率非常好）
2.随机访问效率不好
3.中间插入删除效率没有优势（不适合中间的删除插入等操作），但比列表的随机访问效率要好一点点。

列表的缺点：
缺点：容易造成内存碎片，不支持随机访问，利用率低。




